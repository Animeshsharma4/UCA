# Merge k Sorted Lists

# You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

# Merge all the linked-lists into one sorted linked-list and return it.

 

# Example 1:

# Input: lists = [[1,4,5],[1,3,4],[2,6]]
# Output: [1,1,2,3,4,4,5,6]
# Explanation: The linked-lists are:
# [
#   1->4->5,
#   1->3->4,
#   2->6
# ]
# merging them into one sorted list:
# 1->1->2->3->4->4->5->6
# Example 2:

# Input: lists = []
# Output: []
# Example 3:

# Input: lists = [[]]
# Output: []
 

# Constraints:

# k == lists.length
# 0 <= k <= 104
# 0 <= lists[i].length <= 500
# -104 <= lists[i][j] <= 104
# lists[i] is sorted in ascending order.
# The sum of lists[i].length will not exceed 104.




class Solution {
public:
     ListNode* solve(ListNode* root1,ListNode* root2){
         if(root1==NULL){
             return root2;
         }
         if(root2==NULL){
             return root1;
         }
         if(root1->val<root2->val){
             root1->next=solve(root1->next,root2);
             return root1;
         }
         else{
             root2->next=solve(root1,root2->next);
             return root2;
         }
         return NULL;
     }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* node=new ListNode(INT_MIN);
        for(auto &i : lists){
            node=solve(node,i);
        }
        return node->next;
    }
};